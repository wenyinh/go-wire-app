// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/wenyinh/go-wire-app/api/v1/user"
	"github.com/wenyinh/go-wire-app/pkg/config"
	"github.com/wenyinh/go-wire-app/pkg/service"
	"github.com/wenyinh/go-wire-app/pkg/storage/client"
	"github.com/wenyinh/go-wire-app/pkg/storage/redis"
	"github.com/wenyinh/go-wire-app/pkg/storage/repository"
)

// Injectors from wire.go:

func InitializeApp(config2 *config.AppConfiguration) (*App, func(), error) {
	databaseConfig := &config2.DBConfig
	gormDBClient, cleanup, err := client.NewDatabaseClient(databaseConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepositoryImpl := repository.NewUserRepository(gormDBClient)
	redisConfig := config2.RedisConfig
	cacheClient, cleanup2 := redis.NewCacheClient(redisConfig)
	userServiceImpl, err := service.NewUserService(userRepositoryImpl, cacheClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	controller, err := user.NewController(userServiceImpl)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := New(config2, controller)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
