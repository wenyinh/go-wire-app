// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wenyinh/go-wire-app/pkg/storage/model"
)

func newUserDataModel(db *gorm.DB, opts ...gen.DOOption) userDataModel {
	_userDataModel := userDataModel{}

	_userDataModel.userDataModelDo.UseDB(db, opts...)
	_userDataModel.userDataModelDo.UseModel(&model.UserDataModel{})

	tableName := _userDataModel.userDataModelDo.TableName()
	_userDataModel.ALL = field.NewAsterisk(tableName)
	_userDataModel.ID = field.NewUint64(tableName, "id")
	_userDataModel.Username = field.NewString(tableName, "username")
	_userDataModel.Email = field.NewString(tableName, "email")
	_userDataModel.Gender = field.NewString(tableName, "gender")
	_userDataModel.Age = field.NewInt(tableName, "age")
	_userDataModel.CreateTime = field.NewTime(tableName, "create_time")
	_userDataModel.UpdateTime = field.NewTime(tableName, "update_time")

	_userDataModel.fillFieldMap()

	return _userDataModel
}

type userDataModel struct {
	userDataModelDo userDataModelDo

	ALL        field.Asterisk
	ID         field.Uint64
	Username   field.String
	Email      field.String
	Gender     field.String
	Age        field.Int
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (u userDataModel) Table(newTableName string) *userDataModel {
	u.userDataModelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDataModel) As(alias string) *userDataModel {
	u.userDataModelDo.DO = *(u.userDataModelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDataModel) updateTableName(table string) *userDataModel {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Email = field.NewString(table, "email")
	u.Gender = field.NewString(table, "gender")
	u.Age = field.NewInt(table, "age")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userDataModel) WithContext(ctx context.Context) *userDataModelDo {
	return u.userDataModelDo.WithContext(ctx)
}

func (u userDataModel) TableName() string { return u.userDataModelDo.TableName() }

func (u userDataModel) Alias() string { return u.userDataModelDo.Alias() }

func (u userDataModel) Columns(cols ...field.Expr) gen.Columns {
	return u.userDataModelDo.Columns(cols...)
}

func (u *userDataModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDataModel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["email"] = u.Email
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["age"] = u.Age
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userDataModel) clone(db *gorm.DB) userDataModel {
	u.userDataModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDataModel) replaceDB(db *gorm.DB) userDataModel {
	u.userDataModelDo.ReplaceDB(db)
	return u
}

type userDataModelDo struct{ gen.DO }

func (u userDataModelDo) Debug() *userDataModelDo {
	return u.withDO(u.DO.Debug())
}

func (u userDataModelDo) WithContext(ctx context.Context) *userDataModelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDataModelDo) ReadDB() *userDataModelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDataModelDo) WriteDB() *userDataModelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDataModelDo) Session(config *gorm.Session) *userDataModelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDataModelDo) Clauses(conds ...clause.Expression) *userDataModelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDataModelDo) Returning(value interface{}, columns ...string) *userDataModelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDataModelDo) Not(conds ...gen.Condition) *userDataModelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDataModelDo) Or(conds ...gen.Condition) *userDataModelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDataModelDo) Select(conds ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDataModelDo) Where(conds ...gen.Condition) *userDataModelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDataModelDo) Order(conds ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDataModelDo) Distinct(cols ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDataModelDo) Omit(cols ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDataModelDo) Join(table schema.Tabler, on ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDataModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDataModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDataModelDo) Group(cols ...field.Expr) *userDataModelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDataModelDo) Having(conds ...gen.Condition) *userDataModelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDataModelDo) Limit(limit int) *userDataModelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDataModelDo) Offset(offset int) *userDataModelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDataModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDataModelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDataModelDo) Unscoped() *userDataModelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDataModelDo) Create(values ...*model.UserDataModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDataModelDo) CreateInBatches(values []*model.UserDataModel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDataModelDo) Save(values ...*model.UserDataModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDataModelDo) First() (*model.UserDataModel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataModel), nil
	}
}

func (u userDataModelDo) Take() (*model.UserDataModel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataModel), nil
	}
}

func (u userDataModelDo) Last() (*model.UserDataModel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataModel), nil
	}
}

func (u userDataModelDo) Find() ([]*model.UserDataModel, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDataModel), err
}

func (u userDataModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDataModel, err error) {
	buf := make([]*model.UserDataModel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDataModelDo) FindInBatches(result *[]*model.UserDataModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDataModelDo) Attrs(attrs ...field.AssignExpr) *userDataModelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDataModelDo) Assign(attrs ...field.AssignExpr) *userDataModelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDataModelDo) Joins(fields ...field.RelationField) *userDataModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDataModelDo) Preload(fields ...field.RelationField) *userDataModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDataModelDo) FirstOrInit() (*model.UserDataModel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataModel), nil
	}
}

func (u userDataModelDo) FirstOrCreate() (*model.UserDataModel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDataModel), nil
	}
}

func (u userDataModelDo) FindByPage(offset int, limit int) (result []*model.UserDataModel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDataModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDataModelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDataModelDo) Delete(models ...*model.UserDataModel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDataModelDo) withDO(do gen.Dao) *userDataModelDo {
	u.DO = *do.(*gen.DO)
	return u
}
